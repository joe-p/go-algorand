// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
