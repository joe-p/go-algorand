// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
