// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get all of the logs from outer and inner app calls in the given round
	// (GET /v2/blocks/{round}/logs)
	GetBlockLogs(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetBlockLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockLogs(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/logs", wrapper.GetBlockLogs, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//nkUonU6vAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
