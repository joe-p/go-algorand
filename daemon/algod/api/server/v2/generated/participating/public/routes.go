// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
